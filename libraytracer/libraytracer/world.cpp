#include "world.h"


////////////////////////////////////////////////////////////////////////////////////////////////////
/// World
////////////////////////////////////////////////////////////////////////////////////////////////////
World::World() {}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool World::isEmpty() const
{
    return objects.empty();
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool World::hasLighting() const
{
    return light != nullptr;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void World::addLight(Light* newLight)
{
    light = newLight;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
void World::addShape(Shape* shape)
{
    objects.push_back(shape);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Light World::getLight()
{
    if (hasLighting())
        return *light;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
bool World::containsObject(const Shape& shape)
{
    bool containsObjectOrNot{false};
    for (const auto& o: objects) {
        if (*o == shape) {
            containsObjectOrNot = true;
            break;
        }
    }
    return containsObjectOrNot;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
Intersections World::intersect(Ray ray)
{
    // intersect each object in the World with a Ray,
    //  building a collection of aggregated Intersections
//    Intersections ints{};
//    for(const auto& o: objects) {
//        ints = ints + ray.intersect(o);
//    }
//    return Intersections();
}
